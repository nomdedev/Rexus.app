"""
Script maestro para ejecutar an√°lisis completo de m√≥dulos.
Este script ejecuta todos los an√°lisis necesarios y genera los informes correspondientes.
"""

# Agregar el directorio ra√≠z al path
ROOT_DIR = Path(__file__).resolve().parents[2]
sys.path.append(str(ROOT_DIR))

def ejecutar_comando(comando, descripcion):
    """
    Ejecuta un comando y maneja errores.

    Args:
        comando (list): Lista con el comando y argumentos
        descripcion (str): Descripci√≥n de lo que hace el comando

    Returns:
        bool: True si el comando se ejecut√≥ exitosamente
    """
    print(f"\n[*] {descripcion}...")
    try:
        result = subprocess.run(comando,
capture_output=True,
            text=True,
            cwd=ROOT_DIR)
        if result.returncode == 0:
            print(f"  [CHECK] {descripcion} completado exitosamente")
            if result.stdout:
                print(f"  üìÑ Output: {result.stdout.strip()}")
            return True
        else:
            print(f"  [ERROR] Error en {descripcion}")
            if result.stderr:
                print(f"  üö® Error: {result.stderr.strip()}")
            return False
    except Exception as e:
        print(f"  [ERROR] Excepci√≥n en {descripcion}: {e}")
        return False

def crear_directorio_salida(directorio):
    """Crea el directorio de salida si no existe."""
    os.makedirs(directorio, exist_ok=True)
    print(f"  üìÅ Directorio de salida: {directorio}")

def mostrar_banner():
    """Muestra el banner inicial."""
    print("\n" + "=" * 80)
    print(" " * 25 + "AN√ÅLISIS COMPLETO DE M√ìDULOS")
    print(" " * 32 + "Versi√≥n 1.0.0")
    print(" " * 24 + datetime.datetime.now().strftime("%Y-%m-%d %H:%M"))
    print("=" * 80 + "\n")

    print("Este script ejecutar√°:")
    print("1. An√°lisis de estructura y funcionalidad de todos los m√≥dulos")
    print("2. Generaci√≥n de informes individuales por m√≥dulo")
    print("3. Creaci√≥n de √≠ndice general con estad√≠sticas")
    print("4. An√°lisis de seguridad SQL (opcional)")
    print("5. Escaneo de vulnerabilidades (opcional)")

def mostrar_resumen_final(directorio_salida, exitos, total):
    """Muestra el resumen final de la ejecuci√≥n."""
    print("\n" + "=" * 80)
    print(" " * 30 + "RESUMEN FINAL")
    print("=" * 80)

    print(f"\n[CHART] An√°lisis completado:")
    print(f"  ‚Ä¢ Procesos exitosos: {exitos}/{total}")
    print(f"  ‚Ä¢ Directorio de informes: {directorio_salida}")

    # Listar archivos generados
    if os.path.exists(directorio_salida):
        archivos = os.listdir(directorio_salida)
        html_files = [f for f in archivos if f.endswith('.html')]
        json_files = [f for f in archivos if f.endswith('.json')]

        print(f"\nüìÑ Archivos generados:")
        print(f"  ‚Ä¢ Informes HTML: {len(html_files)}")
        print(f"  ‚Ä¢ Datos JSON: {len(json_files)}")

        # Mostrar archivo principal
        indice_principal = os.path.join(directorio_salida, "00_indice_analisis_modulos.html")
        if os.path.exists(indice_principal):
            print(f"\nüéØ Archivo principal: {indice_principal}")
            print("  Abre este archivo para ver el resumen ejecutivo completo")

    print("\n" + "=" * 80)

def main():
    """Funci√≥n principal del script maestro."""
    parser = argparse.ArgumentParser(description='An√°lisis completo de m√≥dulos del proyecto')
    parser.add_argument('--output', '-o', default='informes_modulos',
                        help='Directorio de salida para los informes')
    parser.add_argument('--skip-seguridad', action='store_true',
                        help='Omitir an√°lisis de seguridad SQL')
    parser.add_argument('--skip-vulnerabilidades', action='store_true',
import argparse
import datetime
import os
import subprocess
import sys
from pathlib import Path

                        help='Omitir escaneo de vulnerabilidades')
    parser.add_argument('--modulo', '-m',
                        help='Analizar solo un m√≥dulo espec√≠fico')

    args = parser.parse_args()

    # Banner inicial
    mostrar_banner()

    # Crear directorio de salida
    directorio_salida = args.output
    crear_directorio_salida(directorio_salida)

    # Contadores para resumen
    total_procesos = 0
    procesos_exitosos = 0

    # 1. An√°lisis de m√≥dulos
    print("\nüîç FASE 1: An√°lisis de M√≥dulos")
    print("-" * 50)

    if args.modulo:
        # Analizar m√≥dulo espec√≠fico
        comando = [
            'python', 'scripts/verificacion/analizador_modulos.py',
            '--modulo', args.modulo,
            '--output', directorio_salida
        ]
        descripcion = f"Analizando m√≥dulo {args.modulo}"
    else:
        # Analizar todos los m√≥dulos
        comando = [
            'python', 'scripts/verificacion/analizador_modulos.py',
            '--todos',
            '--output', directorio_salida
        ]
        descripcion = "Analizando todos los m√≥dulos"

    total_procesos += 1
    if ejecutar_comando(comando, descripcion):
        procesos_exitosos += 1

    # 2. Generar √≠ndice de m√≥dulos
    print("\nüìã FASE 2: Generaci√≥n de √çndice")
    print("-" * 50)

    comando = [
        'python', 'scripts/verificacion/generar_indice_modulos.py',
        '--dir', directorio_salida
    ]

    total_procesos += 1
    if ejecutar_comando(comando, "Generando √≠ndice de an√°lisis de m√≥dulos"):
        procesos_exitosos += 1

    # 3. An√°lisis de seguridad SQL (opcional)
    if not args.skip_seguridad:
        print("\nüõ°Ô∏è FASE 3: An√°lisis de Seguridad SQL")
        print("-" * 50)

        comando = [
            'python', 'scripts/verificacion/analizar_seguridad_sql_codigo.py',
            '--dir', '.',
            '--output', os.path.join(directorio_salida, 'seguridad_sql.html')
        ]

        total_procesos += 1
        if ejecutar_comando(comando, "Analizando seguridad SQL en c√≥digo"):
            procesos_exitosos += 1
    else:
        print("\n‚è≠Ô∏è FASE 3: An√°lisis de Seguridad SQL (omitido)")

    # 4. Escaneo de vulnerabilidades (opcional)
    if not args.skip_vulnerabilidades:
        print("\n[LOCK] FASE 4: Escaneo de Vulnerabilidades")
        print("-" * 50)

        comando = [
            'python', 'scripts/verificacion/escanear_vulnerabilidades.py',
            '--output', os.path.join(directorio_salida, 'vulnerabilidades'),
            '--skip-bd'  # Omitir BD por defecto para evitar errores de conexi√≥n
        ]

        total_procesos += 1
        if ejecutar_comando(comando, "Ejecutando escaneo de vulnerabilidades"):
            procesos_exitosos += 1
    else:
        print("\n‚è≠Ô∏è FASE 4: Escaneo de Vulnerabilidades (omitido)")

    # 5. Generar reporte de tests existentes
    print("\nüß™ FASE 5: An√°lisis de Tests")
    print("-" * 50)

    # Ejecutar pytest con reporte de cobertura si est√° disponible
    comando = ['python', '-m', 'pytest', '--tb=short', '-v']

    total_procesos += 1
    if ejecutar_comando(comando, "Ejecutando tests existentes"):
        procesos_exitosos += 1
    else:
        print("  [WARN] No se pudieron ejecutar todos los tests (puede ser normal)")

    # Mostrar resumen final
    mostrar_resumen_final(directorio_salida, procesos_exitosos, total_procesos)

if __name__ == "__main__":
    main()
