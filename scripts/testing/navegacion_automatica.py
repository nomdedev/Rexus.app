#!/usr/bin/env python3
"""
Script de navegaci√≥n autom√°tica por todos los m√≥dulos de la aplicaci√≥n
para detectar errores durante el uso real.
"""

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), '..', '..')))

# Configurar el entorno Qt antes de importar PyQt5
os.environ['QT_QPA_PLATFORM'] = 'windows'

try:
    # Importar componentes de la aplicaci√≥n
except ImportError as e:
    print(f"‚ùå Error al importar m√≥dulos necesarios: {e}")
    sys.exit(1)

class NavegadorAutomatico(QObject):
    """Navegador autom√°tico por los m√≥dulos de la aplicaci√≥n"""

    error_detectado = pyqtSignal(str)

    def __init__(self, main_window):
        super().__init__()
        self.main_window = main_window
        self.errores = []
        self.modulos_probados = []
        self.timer = QTimer()
        self.timer.timeout.connect(self.siguiente_prueba)
        self.indice_actual = 0

        # Lista de pruebas a realizar
        self.pruebas = [
            self.probar_inventario,
            self.probar_obras,
            self.probar_pedidos,
            self.probar_compras,
            self.probar_vidrios,
            self.probar_herrajes,
            self.probar_contabilidad,
            self.probar_mantenimiento,
            self.probar_configuracion,
            self.probar_auditoria,
            self.probar_usuarios,
            self.probar_logistica,
            self.probar_notificaciones
        ]

    def iniciar_navegacion(self):
        """Inicia la navegaci√≥n autom√°tica"""
        print("üöÄ Iniciando navegaci√≥n autom√°tica por m√≥dulos...")
        self.indice_actual = 0
        self.timer.start(3000)  # 3 segundos entre pruebas

    def siguiente_prueba(self):
        """Ejecuta la siguiente prueba"""
        if self.indice_actual >= len(self.pruebas):
            self.finalizar_navegacion()
            return

        try:
            prueba = self.pruebas[self.indice_actual]
            print(f"üìã Ejecutando: {prueba.__name__}")
            prueba()
            self.modulos_probados.append(prueba.__name__)
        except Exception as e:
            error_msg = f"‚ùå Error en {prueba.__name__}: {str(e)}"
            print(error_msg)
            self.errores.append(error_msg)

        self.indice_actual += 1

    def probar_inventario(self):
        """Prueba el m√≥dulo de inventario"""
        try:
            # Navegar al m√≥dulo de inventario
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('inventario')
            elif hasattr(self.main_window, 'show_inventario'):
                self.main_window.show_inventario()
            print("‚úÖ M√≥dulo inventario accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a inventario: {str(e)}")

    def probar_obras(self):
        """Prueba el m√≥dulo de obras"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('obras')
            elif hasattr(self.main_window, 'show_obras'):
                self.main_window.show_obras()
            print("‚úÖ M√≥dulo obras accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a obras: {str(e)}")

    def probar_pedidos(self):
        """Prueba el m√≥dulo de pedidos"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('pedidos')
            elif hasattr(self.main_window, 'show_pedidos'):
                self.main_window.show_pedidos()
            print("‚úÖ M√≥dulo pedidos accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a pedidos: {str(e)}")

    def probar_compras(self):
        """Prueba el m√≥dulo de compras"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('compras')
            elif hasattr(self.main_window, 'show_compras'):
                self.main_window.show_compras()
            print("‚úÖ M√≥dulo compras accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a compras: {str(e)}")

    def probar_vidrios(self):
        """Prueba el m√≥dulo de vidrios"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('vidrios')
            elif hasattr(self.main_window, 'show_vidrios'):
                self.main_window.show_vidrios()
            print("‚úÖ M√≥dulo vidrios accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a vidrios: {str(e)}")

    def probar_herrajes(self):
        """Prueba el m√≥dulo de herrajes"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('herrajes')
            elif hasattr(self.main_window, 'show_herrajes'):
                self.main_window.show_herrajes()
            print("‚úÖ M√≥dulo herrajes accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a herrajes: {str(e)}")

    def probar_contabilidad(self):
        """Prueba el m√≥dulo de contabilidad"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('contabilidad')
            elif hasattr(self.main_window, 'show_contabilidad'):
                self.main_window.show_contabilidad()
            print("‚úÖ M√≥dulo contabilidad accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a contabilidad: {str(e)}")

    def probar_mantenimiento(self):
        """Prueba el m√≥dulo de mantenimiento"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('mantenimiento')
            elif hasattr(self.main_window, 'show_mantenimiento'):
                self.main_window.show_mantenimiento()
            print("‚úÖ M√≥dulo mantenimiento accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a mantenimiento: {str(e)}")

    def probar_configuracion(self):
        """Prueba el m√≥dulo de configuraci√≥n"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('configuracion')
            elif hasattr(self.main_window, 'show_configuracion'):
                self.main_window.show_configuracion()
            print("‚úÖ M√≥dulo configuraci√≥n accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a configuraci√≥n: {str(e)}")

    def probar_auditoria(self):
        """Prueba el m√≥dulo de auditor√≠a"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('auditoria')
            elif hasattr(self.main_window, 'show_auditoria'):
                self.main_window.show_auditoria()
            print("‚úÖ M√≥dulo auditor√≠a accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a auditor√≠a: {str(e)}")

    def probar_usuarios(self):
        """Prueba el m√≥dulo de usuarios"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('usuarios')
            elif hasattr(self.main_window, 'show_usuarios'):
                self.main_window.show_usuarios()
            print("‚úÖ M√≥dulo usuarios accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a usuarios: {str(e)}")

    def probar_logistica(self):
        """Prueba el m√≥dulo de log√≠stica"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('logistica')
            elif hasattr(self.main_window, 'show_logistica'):
                self.main_window.show_logistica()
            print("‚úÖ M√≥dulo log√≠stica accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a log√≠stica: {str(e)}")

    def probar_notificaciones(self):
        """Prueba el m√≥dulo de notificaciones"""
        try:
            if hasattr(self.main_window, 'navigate_to_module'):
                self.main_window.navigate_to_module('notificaciones')
            elif hasattr(self.main_window, 'show_notificaciones'):
                self.main_window.show_notificaciones()
            print("‚úÖ M√≥dulo notificaciones accesible")
        except Exception as e:
            raise Exception(f"Error al acceder a notificaciones: {str(e)}")

    def finalizar_navegacion(self):
        """Finaliza la navegaci√≥n y genera reporte"""
        self.timer.stop()

        print("\n" + "="*60)
        print("üìä REPORTE DE NAVEGACI√ìN AUTOM√ÅTICA")
        print("="*60)
        print(f"üìÖ Fecha: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print(f"‚úÖ M√≥dulos probados exitosamente: {len(self.modulos_probados)}")
        print(f"‚ùå Errores detectados: {len(self.errores)}")

        if self.modulos_probados:
            print("\nüìù M√≥dulos probados:")
            for modulo in self.modulos_probados:
                print(f"  ‚úÖ {modulo}")

        if self.errores:
            print("\nüö® Errores encontrados:")
            for error in self.errores:
                print(f"  {error}")
        else:
            print("\nüéâ ¬°No se detectaron errores durante la navegaci√≥n!")

        # Guardar reporte
        reporte = {
            'fecha': datetime.now().isoformat(),
            'modulos_probados': self.modulos_probados,
            'errores': self.errores,
            'total_modulos': len(self.pruebas),
            'exito': len(self.errores) == 0
        }

        try:
            os.makedirs('tests/reports', exist_ok=True)
            with open('tests/reports/navegacion_automatica.json', 'w', encoding='utf-8') as f:
                json.dump(reporte, f, indent=2, ensure_ascii=False)
            print(f"\nüíæ Reporte guardado en: tests/reports/navegacion_automatica.json")
        except Exception as e:
            print(f"‚ö†Ô∏è No se pudo guardar el reporte: {e}")

        print("\n‚ú® Navegaci√≥n autom√°tica completada")

def main():
    """Funci√≥n principal"""
    print("üîç Iniciando prueba de navegaci√≥n autom√°tica...")

    # Verificar que la app no est√© ya ejecut√°ndose
    try:
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)

        # Simular el flujo de inicio de la aplicaci√≥n
        db = DatabaseConnection()
        if not db.test_connection():
            print("‚ùå No se puede conectar a la base de datos")
            return False

        # Crear ventana principal con usuario invitado para testing
        main_window = MainWindow()

        # Configurar usuario invitado para testing
        main_window.current_user = {
            'id': 0,
import json
import os
import sys
from datetime import datetime

from PyQt5.QtCore import QObject, QTimer, pyqtSignal
from PyQt5.QtWidgets import QApplication

from core.database import DatabaseConnection
from main import MainWindow

            'username': 'invitado',
            'role': 'invitado',
            'nombre': 'Usuario Invitado'
        }

        main_window.show()

        # Crear y ejecutar navegador autom√°tico
        navegador = NavegadorAutomatico(main_window)

        # Esperar a que la ventana est√© completamente cargada
        QTimer.singleShot(2000, navegador.iniciar_navegacion)

        # Ejecutar la aplicaci√≥n
        if app:
            app.exec_()

    except Exception as e:
        print(f"‚ùå Error durante la ejecuci√≥n: {e}")
        return False

    return True

if __name__ == '__main__':
    success = main()
    sys.exit(0 if success else 1)
