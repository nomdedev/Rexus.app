#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de Diagn√≥stico de M√≥dulos - Rexus.app
Identifica m√≥dulos con problemas de inicializaci√≥n
"""

import sys
import os
import traceback
from pathlib import Path

# Configurar path y encoding
sys.path.insert(0, str(Path(__file__).parent.parent.parent))
os.environ['PYTHONIOENCODING'] = 'utf-8'

def test_module_import(module_path, module_name):
    """Test de importaci√≥n de un m√≥dulo espec√≠fico."""
    try:
        module = __import__(module_path, fromlist=[module_name])
        return True, "OK"
    except ImportError as e:
        return False, f"ImportError: {str(e)}"
    except Exception as e:
        return False, f"Error: {str(e)}"

def test_module_instantiation(module_path, class_name):
    """Test de instanciaci√≥n de una clase del m√≥dulo."""
    try:
        module = __import__(module_path, fromlist=[class_name])
        class_obj = getattr(module, class_name)
        # Intentar crear instancia sin par√°metros
        instance = class_obj()
        return True, "OK"
    except Exception as e:
        return False, f"Error: {str(e)}"

def main():
    """Ejecutar diagn√≥stico completo de m√≥dulos."""
    print("=" * 80)
    print("DIAGN√ìSTICO DE M√ìDULOS - REXUS.APP")
    print("=" * 80)
    
    # M√≥dulos principales a diagnosticar
    modules_to_test = [
        # Format: (module_path, description, class_to_test)
        ("rexus.modules.usuarios.controller", "Usuarios Controller", "UsuariosController"),
        ("rexus.modules.usuarios.model", "Usuarios Model", "UsuariosModel"),
        ("rexus.modules.usuarios.view", "Usuarios View", "UsuariosView"),
        
        ("rexus.modules.inventario.controller", "Inventario Controller", "InventarioController"),
        ("rexus.modules.inventario.model", "Inventario Model", "InventarioModel"),
        ("rexus.modules.inventario.view", "Inventario View", "InventarioView"),
        
        ("rexus.modules.obras.controller", "Obras Controller", "ObrasController"),
        ("rexus.modules.obras.model", "Obras Model", "ObrasModel"),
        ("rexus.modules.obras.view", "Obras View", "ObrasView"),
        
        ("rexus.modules.compras.controller", "Compras Controller", "ComprasController"),
        ("rexus.modules.compras.model", "Compras Model", "ComprasModel"),
        ("rexus.modules.compras.view", "Compras View", "ComprasView"),
        
        ("rexus.modules.pedidos.controller", "Pedidos Controller", "PedidosController"),
        ("rexus.modules.pedidos.model", "Pedidos Model", "PedidosModel"),
        ("rexus.modules.pedidos.view", "Pedidos View", "PedidosView"),
        
        ("rexus.modules.vidrios.controller", "Vidrios Controller", "VidriosController"),
        ("rexus.modules.vidrios.model", "Vidrios Model", "VidriosModel"),
        ("rexus.modules.vidrios.view", "Vidrios View", "VidriosView"),
        
        ("rexus.modules.notificaciones.controller", "Notificaciones Controller", "NotificacionesController"),
        ("rexus.modules.notificaciones.model", "Notificaciones Model", "NotificacionesModel"),
        ("rexus.modules.notificaciones.view", "Notificaciones View", None),
        
        ("rexus.modules.configuracion.controller", "Configuraci√≥n Controller", "ConfiguracionController"),
        ("rexus.modules.configuracion.model", "Configuraci√≥n Model", "ConfiguracionModel"),
        ("rexus.modules.configuracion.view", "Configuraci√≥n View", "ConfiguracionView"),
    ]
    
    results = {
        'importable': [],
        'not_importable': [],
        'instantiable': [],
        'not_instantiable': []
    }
    
    print(f"\nProbando importaci√≥n de {len(modules_to_test)} m√≥dulos...\n")
    
    for module_path, description, class_name in modules_to_test:
        print(f"Testing {description}:")
        print(f"  Module: {module_path}")
        
        # Test 1: Importaci√≥n
        can_import, import_msg = test_module_import(module_path, class_name or "")
        if can_import:
            results['importable'].append((module_path, description))
            print(f"  ‚úÖ Import: {import_msg}")
        else:
            results['not_importable'].append((module_path, description, import_msg))
            print(f"  ‚ùå Import: {import_msg}")
        
        # Test 2: Instanciaci√≥n (solo si se puede importar y hay clase definida)
        if can_import and class_name:
            can_instantiate, instantiate_msg = test_module_instantiation(module_path, class_name)
            if can_instantiate:
                results['instantiable'].append((module_path, description))
                print(f"  ‚úÖ Instantiate: {instantiate_msg}")
            else:
                results['not_instantiable'].append((module_path, description, instantiate_msg))
                print(f"  ‚ùå Instantiate: {instantiate_msg}")
        elif class_name:
            print(f"  ‚è≠Ô∏è  Instantiate: Skipped (import failed)")
        else:
            print(f"  ‚è≠Ô∏è  Instantiate: Skipped (no class specified)")
        
        print()
    
    # Resumen de resultados
    print("=" * 80)
    print("RESUMEN DE DIAGN√ìSTICO")
    print("=" * 80)
    
    print(f"‚úÖ M√ìDULOS IMPORTABLES: {len(results['importable'])}")
    for module_path, description in results['importable']:
        print(f"   - {description}")
    
    print(f"\n‚ùå M√ìDULOS NO IMPORTABLES: {len(results['not_importable'])}")
    for module_path, description, error in results['not_importable']:
        print(f"   - {description}: {error}")
    
    print(f"\n‚úÖ M√ìDULOS INSTANCIABLES: {len(results['instantiable'])}")
    for module_path, description in results['instantiable']:
        print(f"   - {description}")
    
    print(f"\n‚ùå M√ìDULOS NO INSTANCIABLES: {len(results['not_instantiable'])}")
    for module_path, description, error in results['not_instantiable']:
        print(f"   - {description}: {error}")
    
    # Estad√≠sticas finales
    total_modules = len(modules_to_test)
    importable_count = len(results['importable'])
    instantiable_count = len(results['instantiable'])
    
    print(f"\nüìä ESTAD√çSTICAS FINALES:")
    print(f"   Total m√≥dulos probados: {total_modules}")
    print(f"   M√≥dulos importables: {importable_count} ({(importable_count/total_modules)*100:.1f}%)")
    print(f"   M√≥dulos instanciables: {instantiable_count} ({(instantiable_count/total_modules)*100:.1f}%)")
    
    success_rate = (instantiable_count / total_modules) * 100
    if success_rate >= 80:
        print(f"   üéâ Estado: BUENO ({success_rate:.1f}% funcional)")
    elif success_rate >= 60:
        print(f"   ‚ö†Ô∏è  Estado: REGULAR ({success_rate:.1f}% funcional)")
    else:
        print(f"   üö® Estado: CR√çTICO ({success_rate:.1f}% funcional)")
    
    print("\n" + "=" * 80)
    
    # Recomendaciones
    print("RECOMENDACIONES DE CORRECCI√ìN:")
    print("=" * 80)
    
    if results['not_importable']:
        print("üîß PRIORIDAD ALTA - Arreglar importaciones:")
        for module_path, description, error in results['not_importable']:
            if "ModuleNotFoundError" in error:
                print(f"   - {description}: M√≥dulo no existe o path incorrecto")
            elif "ImportError" in error:
                print(f"   - {description}: Dependencia faltante o error de sintaxis")
            else:
                print(f"   - {description}: Error desconocido")
    
    if results['not_instantiable']:
        print("\nüîß PRIORIDAD MEDIA - Arreglar constructores:")
        for module_path, description, error in results['not_instantiable']:
            if "__init__" in error:
                print(f"   - {description}: Constructor requiere par√°metros o tiene errores")
            elif "database" in error.lower():
                print(f"   - {description}: Problema de conexi√≥n a base de datos")
            else:
                print(f"   - {description}: Error de inicializaci√≥n")
    
    print("\nüéØ PR√ìXIMOS PASOS:")
    print("1. Arreglar m√≥dulos no importables (CR√çTICO)")
    print("2. Solucionar problemas de instanciaci√≥n")
    print("3. Crear tests unitarios para m√≥dulos funcionales")
    print("4. Implementar mejoras visuales (especialmente Compras)")
    
    return results

if __name__ == "__main__":
    results = main()