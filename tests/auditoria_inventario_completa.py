#!/usr/bin/env python3
"""
üîç AUDITOR√çA COMPLETA DEL M√ìDULO INVENTARIO
An√°lisis exhaustivo de todos los aspectos del m√≥dulo inventario
"""

import os
import sys
from pathlib import Path
import traceback

# Agregar ruta del proyecto
sys.path.insert(0, str(Path(__file__).parent))

def auditoria_estructura():
    """Auditar estructura del m√≥dulo inventario"""
    print("=" * 60)
    print("üèóÔ∏è  AUDITOR√çA DE ESTRUCTURA")
    print("=" * 60)
    
    inventario_path = Path("rexus/modules/inventario")
    
    # Verificar existencia de archivos core
    archivos_core = {
        "__init__.py": "Inicializaci√≥n del m√≥dulo",
        "model.py": "Modelo de datos",
        "view.py": "Vista/interfaz",
        "controller.py": "Controlador l√≥gica"
    }
    
    problemas_estructura = []
    
    for archivo, descripcion in archivos_core.items():
        archivo_path = inventario_path / archivo
        if archivo_path.exists():
            print(f"   [CHECK] {archivo} - {descripcion}")
        else:
            print(f"   [ERROR] {archivo} - {descripcion} (FALTA)")
            problemas_estructura.append(f"Falta {archivo}")
    
    # Verificar subdirectorios
    subdirs = ["submodules"]
    for subdir in subdirs:
        subdir_path = inventario_path / subdir
        if subdir_path.exists():
            print(f"   [CHECK] {subdir}/ - Subm√≥dulos")
            # Listar archivos en subm√≥dulos
            for archivo in subdir_path.glob("*.py"):
                print(f"      üìÑ {archivo.name}")
        else:
            print(f"   [ERROR] {subdir}/ - Subm√≥dulos (FALTA)")
            problemas_estructura.append(f"Falta directorio {subdir}")
    
    # Verificar archivos backup
    backups = list(inventario_path.glob("*.backup*"))
    if backups:
        print(f"   [WARN]  {len(backups)} archivos backup encontrados:")
        for backup in backups:
            print(f"      üìÑ {backup.name}")
    
    return problemas_estructura

def auditoria_imports():
    """Auditar imports y dependencias"""
    print("=" * 60)
    print("üì¶ AUDITOR√çA DE IMPORTS Y DEPENDENCIAS")
    print("=" * 60)
    
    problemas_imports = []
    
    try:
        # Test imports cr√≠ticos
        print("Probando imports del modelo...")
        from rexus.modules.inventario.model import InventarioModel
        print("   [CHECK] InventarioModel importado correctamente")
        
        print("Probando imports de la vista...")
        from rexus.modules.inventario.view import InventarioView
        print("   [CHECK] InventarioView importado correctamente")
        
        print("Probando imports del controlador...")
        from rexus.modules.inventario.controller import InventarioController
        print("   [CHECK] InventarioController importado correctamente")
        
        # Test di√°logo de obras asociadas
        try:
            from rexus.modules.inventario.obras_asociadas_dialog import ObrasAsociadasDialog
            print("   [CHECK] ObrasAsociadasDialog importado correctamente")
        except ImportError as e:
            print(f"   [ERROR] ObrasAsociadasDialog no disponible: {e}")
            problemas_imports.append("Falta ObrasAsociadasDialog")
        
        # Test dependencias de seguridad
        try:
            from rexus.utils.data_sanitizer import DataSanitizer
            print("   [CHECK] DataSanitizer disponible")
        except ImportError:
            print("   [WARN]  DataSanitizer no disponible")
        
        try:
            from rexus.core.auth_decorators import auth_required
            print("   [CHECK] Auth decorators disponibles")
        except ImportError:
            print("   [WARN]  Auth decorators no disponibles")
            
    except Exception as e:
        print(f"   [ERROR] Error cr√≠tico en imports: {e}")
        problemas_imports.append(f"Error cr√≠tico: {e}")
        traceback.print_exc()
    
    return problemas_imports

def auditoria_base_datos():
    """Auditar conexi√≥n y estructura de base de datos"""
    print("=" * 60)
    print("üóÑÔ∏è  AUDITOR√çA DE BASE DE DATOS")
    print("=" * 60)
    
    problemas_bd = []
    
    try:
        from rexus.core.database import get_inventario_connection
        
        print("Probando conexi√≥n a la base de datos...")
        conn = get_inventario_connection()
        cursor = conn.cursor()
        
        # Verificar tablas principales
        tablas_requeridas = [
            "inventario_perfiles",
            "obras", 
            "detalles_obra",
            "historial",
            "reserva_materiales"
        ]
        
        print("Verificando tablas requeridas:")
        for tabla in tablas_requeridas:
            try:
                cursor.execute(f"SELECT COUNT(*) FROM {tabla}")
                count = cursor.fetchone()[0]
                print(f"   [CHECK] {tabla}: {count} registros")
            except Exception as e:
                print(f"   [ERROR] {tabla}: ERROR - {e}")
                problemas_bd.append(f"Tabla {tabla} no accesible")
        
        # Verificar columnas cr√≠ticas en inventario_perfiles
        print("\nVerificando estructura de inventario_perfiles:")
        cursor.execute("""
            SELECT COLUMN_NAME, DATA_TYPE, IS_NULLABLE 
            FROM INFORMATION_SCHEMA.COLUMNS 
            WHERE TABLE_NAME = 'inventario_perfiles'
            ORDER BY ORDINAL_POSITION
        """)
        
        columnas = cursor.fetchall()
        columnas_requeridas = ['codigo', 'descripcion', 'categoria', 'stock_actual', 'precio_unitario']
        
        columnas_existentes = [col[0] for col in columnas]
        for col_req in columnas_requeridas:
            if col_req in columnas_existentes:
                print(f"   [CHECK] Columna {col_req} existe")
            else:
                print(f"   [ERROR] Columna {col_req} FALTA")
                problemas_bd.append(f"Falta columna {col_req}")
        
        print(f"\nTotal columnas en inventario_perfiles: {len(columnas)}")
        
        # Verificar relaci√≥n inventario-obras
        print("\nVerificando relaci√≥n inventario-obras:")
        cursor.execute("""
            SELECT COUNT(*) FROM detalles_obra 
            WHERE codigo_inventario IS NOT NULL
        """)
        
        relaciones = cursor.fetchone()[0]
        print(f"   [CHECK] {relaciones} relaciones inventario-obras encontradas")
        
        conn.close()
        
    except Exception as e:
        print(f"   [ERROR] Error conectando a BD: {e}")
        problemas_bd.append(f"Error de conexi√≥n: {e}")
        traceback.print_exc()
    
    return problemas_bd

def auditoria_interfaz():
    """Auditar interfaz de usuario"""
    print("=" * 60)
    print("üñ•Ô∏è  AUDITOR√çA DE INTERFAZ DE USUARIO")
    print("=" * 60)
    
    problemas_ui = []
    
    try:
        from PyQt6.QtWidgets import QApplication
        from rexus.modules.inventario.view import InventarioView
        
        # Crear aplicaci√≥n Qt si no existe
        app = QApplication.instance()
        if app is None:
            app = QApplication([])
        
        print("Creando vista de inventario...")
        vista = InventarioView()
        
        # Verificar componentes cr√≠ticos
        componentes_requeridos = [
            'tabla_inventario',
            'tab_widget', 
            'busqueda_input',
            'btn_buscar',
            'btn_nuevo_producto',
            'btn_editar',
            'btn_eliminar'
        ]
        
        print("Verificando componentes de la interfaz:")
        for componente in componentes_requeridos:
            if hasattr(vista, componente):
                print(f"   [CHECK] {componente} existe")
            else:
                print(f"   [ERROR] {componente} FALTA")
                problemas_ui.append(f"Falta componente {componente}")
        
        # Verificar estilos
        print("\nVerificando estilos aplicados:")
        if vista.styleSheet():
            print("   [CHECK] Estilos CSS aplicados")
            # Verificar estilos de alto contraste
            styles = vista.styleSheet()
            if "background-color: #ffffff" in styles and "color: #000000" in styles:
                print("   [CHECK] Estilos de alto contraste aplicados")
            else:
                print("   [WARN]  Estilos de alto contraste incompletos")
                problemas_ui.append("Estilos de alto contraste incompletos")
        else:
            print("   [ERROR] No hay estilos aplicados")
            problemas_ui.append("Faltan estilos CSS")
        
        # Verificar se√±ales conectadas
        print("\nVerificando se√±ales de la vista:")
        if hasattr(vista, 'datos_actualizados'):
            print("   [CHECK] Se√±al datos_actualizados existe")
        
        if hasattr(vista, 'solicitar_busqueda'):
            print("   [CHECK] Se√±al solicitar_busqueda existe")
        
        # Test doble click en tabla
        if hasattr(vista, 'tabla_inventario') and vista.tabla_inventario:
            print("   [CHECK] Tabla de inventario inicializada")
            # Verificar si hay conexi√≥n de doble click
            try:
                # Esto es un hack para verificar si hay conexiones
                receivers = vista.tabla_inventario.receivers(vista.tabla_inventario.itemDoubleClicked)
                if receivers > 0:
                    print("   [CHECK] Doble click conectado")
                else:
                    print("   [WARN]  Doble click no conectado")
                    problemas_ui.append("Doble click no conectado")
            except:
                print("   [WARN]  No se pudo verificar doble click")
        
    except Exception as e:
        print(f"   [ERROR] Error en auditor√≠a de interfaz: {e}")
        problemas_ui.append(f"Error de interfaz: {e}")
        traceback.print_exc()
    
    return problemas_ui

def auditoria_funcionalidad():
    """Auditar funcionalidades espec√≠ficas del m√≥dulo"""
    print("=" * 60)
    print("‚öôÔ∏è  AUDITOR√çA DE FUNCIONALIDADES")
    print("=" * 60)
    
    problemas_func = []
    
    try:
        from rexus.modules.inventario.model import InventarioModel
        from rexus.modules.inventario.controller import InventarioController
        
        print("Probando instanciaci√≥n del modelo...")
        modelo = InventarioModel()
        print("   [CHECK] Modelo instanciado correctamente")
        
        # Verificar m√©todos cr√≠ticos del modelo
        metodos_modelo = [
            'obtener_inventario',
            'buscar_productos', 
            'crear_producto',
            'actualizar_producto',
            'eliminar_producto',
            'obtener_estadisticas'
        ]
        
        print("\nVerificando m√©todos del modelo:")
        for metodo in metodos_modelo:
            if hasattr(modelo, metodo):
                print(f"   [CHECK] {metodo} existe")
            else:
                print(f"   [ERROR] {metodo} FALTA")
                problemas_func.append(f"Falta m√©todo {metodo}")
        
        print("\nProbando instanciaci√≥n del controlador...")
        controlador = InventarioController(model=modelo)
        print("   [CHECK] Controlador instanciado correctamente")
        
        # Verificar m√©todos cr√≠ticos del controlador
        metodos_controlador = [
            'cargar_inventario',
            'buscar_productos',
            'nuevo_producto',
            'editar_producto',
            'eliminar_producto'
        ]
        
        print("\nVerificando m√©todos del controlador:")
        for metodo in metodos_controlador:
            if hasattr(controlador, metodo):
                print(f"   [CHECK] {metodo} existe")
            else:
                print(f"   [ERROR] {metodo} FALTA")
                problemas_func.append(f"Falta m√©todo controlador {metodo}")
        
        # Test funcionalidad de obras asociadas
        print("\nVerificando funcionalidad de obras asociadas:")
        try:
            from rexus.modules.inventario.obras_asociadas_dialog import ObrasAsociadasDialog
            
            # Test datos del di√°logo
            datos_test = {
                'codigo': 'TEST001',
                'descripcion': 'Material de prueba',
                'categoria': 'Test',
                'stock_actual': 100
            }
            
            dialogo = ObrasAsociadasDialog(datos_test)
            print("   [CHECK] Di√°logo de obras asociadas funcional")
            
            if hasattr(dialogo, 'cargar_obras_asociadas'):
                print("   [CHECK] M√©todo cargar_obras_asociadas existe")
            else:
                print("   [ERROR] M√©todo cargar_obras_asociadas FALTA")
                problemas_func.append("Falta m√©todo cargar_obras_asociadas")
            
        except Exception as e:
            print(f"   [ERROR] Error en obras asociadas: {e}")
            problemas_func.append(f"Error en obras asociadas: {e}")
        
    except Exception as e:
        print(f"   [ERROR] Error en auditor√≠a de funcionalidades: {e}")
        problemas_func.append(f"Error funcional: {e}")
        traceback.print_exc()
    
    return problemas_func

def auditoria_seguridad():
    """Auditar aspectos de seguridad"""
    print("=" * 60)
    print("[LOCK] AUDITOR√çA DE SEGURIDAD")
    print("=" * 60)
    
    problemas_seg = []
    
    try:
        from rexus.modules.inventario.model import InventarioModel
        
        modelo = InventarioModel()
        
        # Verificar sanitizaci√≥n de datos
        print("Verificando utilidades de seguridad:")
        if hasattr(modelo, 'data_sanitizer') and modelo.data_sanitizer:
            print("   [CHECK] DataSanitizer disponible")
        else:
            print("   [WARN]  DataSanitizer no disponible")
            problemas_seg.append("DataSanitizer no disponible")
        
        if hasattr(modelo, 'sql_validator') and modelo.sql_validator:
            print("   [CHECK] SQL Validator disponible")
        else:
            print("   [WARN]  SQL Validator no disponible") 
            problemas_seg.append("SQL Validator no disponible")
        
        # Verificar decoradores de autenticaci√≥n
        print("\nVerificando decoradores de seguridad:")
        try:
            from rexus.core.auth_decorators import auth_required, admin_required
            print("   [CHECK] Decoradores de autenticaci√≥n disponibles")
        except ImportError:
            print("   [WARN]  Decoradores de autenticaci√≥n no disponibles")
            problemas_seg.append("Decoradores de auth no disponibles")
        
        # Verificar protecci√≥n XSS
        print("\nVerificando protecci√≥n XSS:")
        try:
            from rexus.utils.xss_protection import FormProtector
            print("   [CHECK] FormProtector disponible")
        except ImportError:
            print("   [WARN]  FormProtector no disponible")
            problemas_seg.append("FormProtector no disponible")
        
    except Exception as e:
        print(f"   [ERROR] Error en auditor√≠a de seguridad: {e}")
        problemas_seg.append(f"Error de seguridad: {e}")
    
    return problemas_seg

def auditoria_tests():
    """Auditar tests existentes"""
    print("=" * 60)
    print("üß™ AUDITOR√çA DE TESTS")
    print("=" * 60)
    
    problemas_tests = []
    
    # Buscar archivos de test
    test_files = []
    
    # Buscar en directorio tests
    tests_dir = Path("tests")
    if tests_dir.exists():
        test_files.extend(tests_dir.glob("**/test_inventario*.py"))
        test_files.extend(tests_dir.glob("**/inventario*.py"))
    
    # Buscar en ra√≠z del proyecto
    root_tests = list(Path(".").glob("test_inventario*.py"))
    test_files.extend(root_tests)
    
    print(f"Archivos de test encontrados: {len(test_files)}")
    
    if test_files:
        for test_file in test_files:
            print(f"   üìÑ {test_file}")
    else:
        print("   [WARN]  No se encontraron tests espec√≠ficos de inventario")
        problemas_tests.append("Faltan tests espec√≠ficos")
    
    # Verificar tests cr√≠ticos
    tests_requeridos = [
        "test_inventario_model",
        "test_inventario_view", 
        "test_inventario_controller",
        "test_obras_asociadas"
    ]
    
    print("\nTests requeridos:")
    for test in tests_requeridos:
        encontrado = any(test in str(tf) for tf in test_files)
        if encontrado:
            print(f"   [CHECK] {test}")
        else:
            print(f"   [ERROR] {test} FALTA")
            problemas_tests.append(f"Falta test {test}")
    
    return problemas_tests

def auditoria_performance():
    """Auditar aspectos de performance"""
    print("=" * 60)
    print("‚ö° AUDITOR√çA DE PERFORMANCE")
    print("=" * 60)
    
    problemas_perf = []
    
    try:
        from rexus.modules.inventario.model import InventarioModel
        
        modelo = InventarioModel()
        
        # Verificar paginaci√≥n
        print("Verificando utilidades de performance:")
        if hasattr(modelo, 'paginate_query'):
            print("   [CHECK] Paginaci√≥n disponible")
        else:
            print("   [WARN]  Paginaci√≥n no implementada")
            problemas_perf.append("Falta paginaci√≥n")
        
        # Verificar cache
        if hasattr(modelo, 'cache_manager'):
            print("   [CHECK] Cache manager disponible")
        else:
            print("   [WARN]  Cache manager no disponible")
            problemas_perf.append("Falta cache manager")
        
        # Verificar conexi√≥n a BD
        if hasattr(modelo, 'db_connection'):
            print("   [CHECK] Conexi√≥n BD configurada")
        else:
            print("   [WARN]  Conexi√≥n BD no configurada")
            problemas_perf.append("Conexi√≥n BD no configurada")
        
    except Exception as e:
        print(f"   [ERROR] Error en auditor√≠a de performance: {e}")
        problemas_perf.append(f"Error de performance: {e}")
    
    return problemas_perf

def generar_reporte_final(todos_problemas):
    """Generar reporte final de la auditor√≠a"""
    print("\n" + "=" * 80)
    print("üìã REPORTE FINAL DE AUDITOR√çA DEL M√ìDULO INVENTARIO")
    print("=" * 80)
    
    total_problemas = sum(len(problemas) for problemas in todos_problemas.values())
    
    if total_problemas == 0:
        print("üéâ ¬°EXCELENTE! No se encontraron problemas cr√≠ticos.")
        print("   El m√≥dulo inventario est√° en buen estado.")
    else:
        print(f"[WARN]  Se encontraron {total_problemas} problemas que requieren atenci√≥n:")
        
        for categoria, problemas in todos_problemas.items():
            if problemas:
                print(f"\nüî∏ {categoria.upper()}:")
                for i, problema in enumerate(problemas, 1):
                    print(f"   {i}. {problema}")
    
    # Priorizaci√≥n de problemas
    print("\nüéØ PRIORIZACI√ìN DE CORRECCIONES:")
    
    problemas_criticos = []
    problemas_importantes = []
    problemas_menores = []
    
    # Clasificar problemas
    for categoria, problemas in todos_problemas.items():
        for problema in problemas:
            if any(word in problema.lower() for word in ['error cr√≠tico', 'falta', 'no disponible']):
                if categoria in ['estructura', 'imports', 'base_datos']:
                    problemas_criticos.append(f"{categoria}: {problema}")
                else:
                    problemas_importantes.append(f"{categoria}: {problema}")
            else:
                problemas_menores.append(f"{categoria}: {problema}")
    
    if problemas_criticos:
        print("\nüö® CR√çTICOS (Corregir inmediatamente):")
        for p in problemas_criticos:
            print(f"   ‚Ä¢ {p}")
    
    if problemas_importantes:
        print("\n[WARN]  IMPORTANTES (Corregir pronto):")
        for p in problemas_importantes:
            print(f"   ‚Ä¢ {p}")
    
    if problemas_menores:
        print("\nüìù MENORES (Mejorar cuando sea posible):")
        for p in problemas_menores:
            print(f"   ‚Ä¢ {p}")
    
    # Recomendaciones
    print("\nüí° RECOMENDACIONES:")
    print("   1. Priorizar correcciones cr√≠ticas antes de continuar desarrollo")
    print("   2. Implementar tests faltantes para mayor robustez")
    print("   3. Mejorar documentaci√≥n del c√≥digo")
    print("   4. Considerar refactorizaci√≥n si hay muchos problemas estructurales")
    
    return total_problemas

def main():
    """Funci√≥n principal de auditor√≠a"""
    print("üîç INICIANDO AUDITOR√çA COMPLETA DEL M√ìDULO INVENTARIO")
    print("=" * 80)
    
    # Ejecutar todas las auditor√≠as
    problemas = {
        'estructura': auditoria_estructura(),
        'imports': auditoria_imports(),
        'base_datos': auditoria_base_datos(),
        'interfaz': auditoria_interfaz(),
        'funcionalidad': auditoria_funcionalidad(),
        'seguridad': auditoria_seguridad(),
        'tests': auditoria_tests(),
        'performance': auditoria_performance()
    }
    
    # Generar reporte final
    total_problemas = generar_reporte_final(problemas)
    
    print(f"\nüèÅ AUDITOR√çA COMPLETADA")
    print(f"   Problemas encontrados: {total_problemas}")
    print(f"   Tiempo de ejecuci√≥n: ‚è±Ô∏è")
    
    return total_problemas == 0

if __name__ == "__main__":
    try:
        exito = main()
        sys.exit(0 if exito else 1)
    except KeyboardInterrupt:
        print("\nüõë Auditor√≠a interrumpida por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n[ERROR] Error inesperado en auditor√≠a: {e}")
        traceback.print_exc()
        sys.exit(1)
