#!/usr/bin/env python3
"""
Test de Integraci√≥n Completa para el M√≥dulo Inventario
Replica exactamente el comportamiento de la aplicaci√≥n real para detectar errores reales.
"""

import os
import sys
import traceback
from unittest.mock import MagicMock, Mock

# Agregar el directorio ra√≠z al path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))


def test_real_application_flow():
    """Prueba el flujo completo como en la aplicaci√≥n real."""
    print("üîç AUDITORIA COMPLETA: Simulando flujo real de la aplicaci√≥n")
    print("=" * 80)

    errors_found = []

    try:
        # 1. IMPORTACIONES COMO EN MAIN.PY
        print("\nüìã PASO 1: Importaciones como en la aplicaci√≥n real")

        # Simular el entorno de PyQt6
        try:
            from PyQt6.QtCore import QObject, pyqtSignal
            from PyQt6.QtWidgets import QApplication, QWidget

            print("‚úÖ PyQt6 disponible")
        except ImportError as e:
            print(f"‚ùå Error PyQt6: {e}")
            errors_found.append(f"PyQt6 Import Error: {e}")

        # Importar el m√≥dulo como lo hace module_manager
        try:
            from rexus.modules.inventario import (
                InventarioController,
                InventarioModel,
                InventarioView,
            )

            print("‚úÖ M√≥dulo inventario importado desde __init__.py")
        except Exception as e:
            print(f"‚ùå Error importando m√≥dulo inventario: {e}")
            errors_found.append(f"Module Import Error: {e}")
            traceback.print_exc()

        # 2. CREACI√ìN DE INSTANCIAS COMO EN MODULE_MANAGER
        print("\nüìã PASO 2: Creaci√≥n de instancias como module_manager")

        # Simular conexi√≥n de base de datos
        mock_db = Mock()
        mock_db.cursor.return_value = Mock()

        try:
            # Crear modelo
            print("   üîß Creando modelo...")
            model = InventarioModel(mock_db)
            print("   ‚úÖ Modelo creado exitosamente")
        except Exception as e:
            print(f"   ‚ùå Error creando modelo: {e}")
            errors_found.append(f"Model Creation Error: {e}")
            traceback.print_exc()

        try:
            # Crear vista
            print("   üîß Creando vista...")
            # Simular QApplication para evitar errores de Qt
            app = None
            try:
                app = QApplication.instance()
                if app is None:
                    app = QApplication([])
            except:
                pass

            view = InventarioView()
            print("   ‚úÖ Vista creada exitosamente")
        except Exception as e:
            print(f"   ‚ùå Error creando vista: {e}")
            errors_found.append(f"View Creation Error: {e}")
            traceback.print_exc()

        try:
            # Crear controlador
            print("   üîß Creando controlador...")
            controller = InventarioController(model, view)
            print("   ‚úÖ Controlador creado exitosamente")
        except Exception as e:
            print(f"   ‚ùå Error creando controlador: {e}")
            errors_found.append(f"Controller Creation Error: {e}")
            traceback.print_exc()

        # 3. CARGA INICIAL COMO EN MODULE_MANAGER
        print("\nüìã PASO 3: Carga inicial de datos como module_manager")

        try:
            # Simular el m√©todo que llama module_manager
            if hasattr(controller, "cargar_inventario_inicial"):
                print("   üîß Llamando cargar_inventario_inicial...")
                controller.cargar_inventario_inicial()
                print("   ‚úÖ Carga inicial exitosa")
            else:
                print("   ‚ùå M√©todo cargar_inventario_inicial no encontrado")
                errors_found.append("Method cargar_inventario_inicial not found")
        except Exception as e:
            print(f"   ‚ùå Error en carga inicial: {e}")
            errors_found.append(f"Initial Load Error: {e}")
            traceback.print_exc()

        # 4. CONEXIONES DE SE√ëALES
        print("\nüìã PASO 4: Verificando conexiones de se√±ales")

        try:
            # Verificar que las se√±ales se conectaron correctamente
            if hasattr(view, "btn_buscar") and hasattr(controller, "buscar_productos"):
                print("   ‚úÖ btn_buscar y buscar_productos disponibles")
            else:
                print("   ‚ùå Falta btn_buscar o buscar_productos")
                errors_found.append("Signal connection: btn_buscar missing")

            if hasattr(view, "tabla_inventario"):
                print("   ‚úÖ tabla_inventario disponible en vista")
            else:
                print("   ‚ùå tabla_inventario no disponible")
                errors_found.append("UI component: tabla_inventario missing")

        except Exception as e:
            print(f"   ‚ùå Error verificando se√±ales: {e}")
            errors_found.append(f"Signal Check Error: {e}")

        # 5. PRUEBA DE M√âTODOS REALES DEL MODELO
        print("\nüìã PASO 5: Probando m√©todos reales del modelo")

        try:
            # Probar obtener_productos_paginados con par√°metros reales
            if hasattr(model, "obtener_productos_paginados"):
                print("   üîß Probando obtener_productos_paginados(0, 100)...")
                resultado = model.obtener_productos_paginados(0, 100)
                print(
                    f"   ‚úÖ Resultado: {type(resultado)} - {len(str(resultado)[:100])}..."
                )
            else:
                print("   ‚ùå M√©todo obtener_productos_paginados no disponible")
                errors_found.append("Model method: obtener_productos_paginados missing")
        except Exception as e:
            print(f"   ‚ùå Error ejecutando obtener_productos_paginados: {e}")
            errors_found.append(f"Model Method Error: {e}")
            traceback.print_exc()

        # 6. PRUEBA DE AUTENTICACI√ìN
        print("\nüìã PASO 6: Verificando sistema de autenticaci√≥n")

        try:
            # Simular contexto de autenticaci√≥n
            from rexus.core import auth_manager

            if hasattr(auth_manager, "current_user"):
                print("   ‚úÖ Sistema de autenticaci√≥n disponible")
            else:
                print("   ‚ö†Ô∏è Sistema de autenticaci√≥n no disponible")

            # Probar m√©todo con decorador auth_required
            if hasattr(controller, "cargar_inventario"):
                print("   üîß Probando m√©todo con @auth_required...")
                try:
                    controller.cargar_inventario()
                    print("   ‚úÖ M√©todo auth_required ejecutado")
                except Exception as auth_e:
                    print(f"   ‚ùå Error de autenticaci√≥n: {auth_e}")
                    errors_found.append(f"Auth Error: {auth_e}")
        except Exception as e:
            print(f"   ‚ùå Error verificando autenticaci√≥n: {e}")
            errors_found.append(f"Auth System Error: {e}")

    except Exception as e:
        print(f"‚ùå Error general en test: {e}")
        errors_found.append(f"General Test Error: {e}")
        traceback.print_exc()

    return errors_found


def test_database_integration():
    """Prueba la integraci√≥n real con base de datos."""
    print("\nüîç AUDITORIA BD: Probando integraci√≥n real con base de datos")
    print("=" * 80)

    errors_found = []

    try:
        # Importar utilidades de BD reales
        from rexus.utils.database import DatabaseManager

        # Crear conexi√≥n real
        db_manager = DatabaseManager()
        connection = db_manager.get_connection()

        if connection:
            print("‚úÖ Conexi√≥n a BD exitosa")

            # Probar modelo con BD real
            from rexus.modules.inventario import InventarioModel

            model = InventarioModel(connection)

            # Probar m√©todos con BD real
            try:
                resultado = model.obtener_productos_paginados(0, 10)
                print(f"‚úÖ obtener_productos_paginados funcion√≥: {type(resultado)}")
            except Exception as e:
                print(f"‚ùå Error en obtener_productos_paginados: {e}")
                errors_found.append(f"DB Method Error: {e}")

        else:
            print("‚ùå No se pudo conectar a la BD")
            errors_found.append("Database connection failed")

    except Exception as e:
        print(f"‚ùå Error en test de BD: {e}")
        errors_found.append(f"DB Test Error: {e}")
        traceback.print_exc()

    return errors_found


def test_ui_integration():
    """Prueba la integraci√≥n real con interfaz de usuario."""
    print("\nüîç AUDITORIA UI: Probando integraci√≥n real con interfaz")
    print("=" * 80)

    errors_found = []

    try:
        from PyQt6.QtWidgets import QApplication

        from rexus.modules.inventario import InventarioView

        # Crear aplicaci√≥n Qt si no existe
        app = QApplication.instance()
        if app is None:
            app = QApplication([])

        # Crear vista
        view = InventarioView()

        # Verificar componentes UI requeridos
        required_components = [
            "btn_buscar",
            "btn_actualizar",
            "btn_limpiar",
            "btn_nuevo_producto",
            "btn_editar",
            "btn_eliminar",
            "btn_movimiento",
            "btn_exportar",
            "tabla_inventario",
        ]

        for component in required_components:
            if hasattr(view, component):
                widget = getattr(view, component)
                if widget is not None:
                    print(f"   ‚úÖ {component}: {type(widget).__name__}")
                else:
                    print(f"   ‚ùå {component}: existe pero es None")
                    errors_found.append(f"UI Component is None: {component}")
            else:
                print(f"   ‚ùå {component}: no existe")
                errors_found.append(f"UI Component missing: {component}")

        # Probar actualizaci√≥n de vista
        try:
            if hasattr(view, "tabla_inventario") and view.tabla_inventario:
                # Simular datos de prueba
                test_data = [
                    {"codigo": "TEST001", "descripcion": "Test Product", "stock": 10}
                ]

                # Intentar diferentes m√©todos de actualizaci√≥n
                if hasattr(view, "actualizar_tabla"):
                    view.actualizar_tabla(test_data)
                    print("   ‚úÖ actualizar_tabla funcion√≥")
                elif hasattr(view, "mostrar_productos"):
                    view.mostrar_productos(test_data)
                    print("   ‚úÖ mostrar_productos funcion√≥")
                else:
                    print("   ‚ùå No hay m√©todo para actualizar vista")
                    errors_found.append("No method to update view found")

        except Exception as e:
            print(f"   ‚ùå Error actualizando vista: {e}")
            errors_found.append(f"View Update Error: {e}")

    except Exception as e:
        print(f"‚ùå Error en test UI: {e}")
        errors_found.append(f"UI Test Error: {e}")
        traceback.print_exc()

    return errors_found


def test_controller_methods():
    """Prueba espec√≠fica de m√©todos del controlador."""
    print("\nüîç AUDITORIA CONTROLLER: Probando m√©todos del controlador")
    print("=" * 80)

    errors_found = []

    try:
        from rexus.modules.inventario import InventarioController

        # Mock de dependencias
        mock_model = Mock()
        mock_view = Mock()

        # Configurar mock_view con atributos esperados
        mock_view.btn_buscar = Mock()
        mock_view.btn_actualizar = Mock()
        mock_view.tabla_inventario = Mock()

        # Crear controlador
        controller = InventarioController(mock_model, mock_view)

        # Verificar m√©todos requeridos
        required_methods = [
            "cargar_inventario_inicial",
            "cargar_inventario",
            "buscar_productos",
            "conectar_senales",
            "_cargar_datos_inventario",
            "_actualizar_vista_productos",
        ]

        for method in required_methods:
            if hasattr(controller, method):
                print(f"   ‚úÖ {method}: disponible")

                # Probar ejecuci√≥n si es seguro
                if method in ["conectar_senales"]:
                    try:
                        getattr(controller, method)()
                        print(f"   ‚úÖ {method}: ejecutado exitosamente")
                    except Exception as e:
                        print(f"   ‚ùå {method}: error al ejecutar - {e}")
                        errors_found.append(f"Controller method error {method}: {e}")
            else:
                print(f"   ‚ùå {method}: no disponible")
                errors_found.append(f"Controller method missing: {method}")

    except Exception as e:
        print(f"‚ùå Error en test controller: {e}")
        errors_found.append(f"Controller Test Error: {e}")
        traceback.print_exc()

    return errors_found


def main():
    """Ejecuta auditor√≠a completa del m√≥dulo inventario."""
    print("üöÄ AUDITOR√çA COMPLETA DEL M√ìDULO INVENTARIO")
    print("üîç Detectando errores reales que ocurren en la aplicaci√≥n")
    print("=" * 80)

    all_errors = []

    # Ejecutar todas las pruebas
    tests = [
        ("Flujo Real de Aplicaci√≥n", test_real_application_flow),
        ("Integraci√≥n con Base de Datos", test_database_integration),
        ("Integraci√≥n con Interfaz", test_ui_integration),
        ("M√©todos del Controlador", test_controller_methods),
    ]

    for test_name, test_func in tests:
        print(f"\nüß™ EJECUTANDO: {test_name}")
        print("-" * 60)
        try:
            errors = test_func()
            if errors:
                all_errors.extend([(test_name, error) for error in errors])
            else:
                print(f"‚úÖ {test_name}: Sin errores detectados")
        except Exception as e:
            print(f"‚ùå {test_name}: Error en test - {e}")
            all_errors.append((test_name, f"Test execution error: {e}"))

    # Reporte final
    print("\n" + "=" * 80)
    print("üìä REPORTE FINAL DE AUDITOR√çA")
    print("=" * 80)

    if all_errors:
        print(f"‚ùå SE ENCONTRARON {len(all_errors)} ERRORES:")
        print()

        error_categories = {}
        for test_name, error in all_errors:
            if test_name not in error_categories:
                error_categories[test_name] = []
            error_categories[test_name].append(error)

        for category, errors in error_categories.items():
            print(f"üî∏ {category}:")
            for error in errors:
                print(f"   ‚Ä¢ {error}")
            print()

        print("üîß ACCIONES REQUERIDAS:")
        print("   1. Corregir errores de importaci√≥n en __init__.py")
        print("   2. Arreglar m√©todos faltantes en controlador")
        print("   3. Sincronizar vista-controlador")
        print("   4. Resolver problemas de autenticaci√≥n")
        print("   5. Verificar integraci√≥n con base de datos")

        return False
    else:
        print("üéâ ¬°NO SE ENCONTRARON ERRORES!")
        print("‚úÖ El m√≥dulo inventario est√° funcionando correctamente")
        return True


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
