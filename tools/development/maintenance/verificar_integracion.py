#!/usr/bin/env python3
"""
Script de verificaci√≥n final del sistema de integraci√≥n cruzada.
Ejecuta todas las validaciones necesarias y reporta el estado del sistema.
"""

sys.path.append(os.path.dirname(os.path.abspath(__file__)))


def verificar_sistema():
    """Verificaci√≥n completa del sistema de integraci√≥n"""

    print("üîç VERIFICACI√ìN FINAL DEL SISTEMA DE INTEGRACI√ìN")
    print("=" * 55)

    resultados = {
        "conexion": False,
        "modelos": 0,
        "integracion": 0,
        "visual": False,
        "errores": [],
    }

    try:
        # 1. Verificar conexi√≥n
        print("\n1Ô∏è‚É£  Verificando conexi√≥n a base de datos...")
        app = QApplication.instance()
        if app is None:
            app = QApplication(sys.argv)

        db = ObrasDatabaseConnection()
        db.conectar()
        print(f"   [CHECK] Conectado a: {db.database}")
        resultados["conexion"] = True

        # 2. Verificar modelos
        print("\n2Ô∏è‚É£  Verificando modelos de integraci√≥n...")

        modelos_verificados = []

        # Obras
        try:
            obras_model = ObrasModel(db)
            modelos_verificados.append("ObrasModel")
            print("   [CHECK] ObrasModel")
        except Exception as e:
            resultados["errores"].append(f"ObrasModel: {e}")
            print(f"   [ERROR] ObrasModel: {e}")

        # Inventario
        try:
            inv_model = InventarioModel(db)
            if hasattr(inv_model, "obtener_estado_pedido_por_obra"):
                modelos_verificados.append("InventarioModel")
                print("   [CHECK] InventarioModel + m√©todo integraci√≥n")
            else:
                print("   [WARN]  InventarioModel sin m√©todo integraci√≥n")
        except Exception as e:
            resultados["errores"].append(f"InventarioModel: {e}")
            print(f"   [ERROR] InventarioModel: {e}")

        # Vidrios
        try:
            vid_model = VidriosModel(db)
            if hasattr(vid_model, "obtener_estado_pedido_por_obra"):
                modelos_verificados.append("VidriosModel")
                print("   [CHECK] VidriosModel + m√©todo integraci√≥n")
            else:
                print("   [WARN]  VidriosModel sin m√©todo integraci√≥n")
        except Exception as e:
            resultados["errores"].append(f"VidriosModel: {e}")
            print(f"   [ERROR] VidriosModel: {e}")

        # Herrajes
        try:
            her_model = HerrajesModel(db)
            if hasattr(her_model, "obtener_estado_pedido_por_obra"):
                modelos_verificados.append("HerrajesModel")
                print("   [CHECK] HerrajesModel + m√©todo integraci√≥n")
            else:
                print("   [WARN]  HerrajesModel sin m√©todo integraci√≥n")
        except Exception as e:
            resultados["errores"].append(f"HerrajesModel: {e}")
            print(f"   [ERROR] HerrajesModel: {e}")

        # Contabilidad
        try:
            cont_model = ContabilidadModel(db)
            if hasattr(cont_model, "obtener_estado_pago_pedido_por_obra"):
                modelos_verificados.append("ContabilidadModel")
                print("   [CHECK] ContabilidadModel + m√©todo integraci√≥n")
            else:
                print("   [WARN]  ContabilidadModel sin m√©todo integraci√≥n")
        except Exception as e:
            resultados["errores"].append(f"ContabilidadModel: {e}")
            print(f"   [ERROR] ContabilidadModel: {e}")

        resultados["modelos"] = len(modelos_verificados)

        # 3. Verificar integraci√≥n visual
        print("\n3Ô∏è‚É£  Verificando integraci√≥n visual...")

        try:
            headers = obras_model.obtener_headers_obras()
            columnas_integracion = [
                "estado_material",
                "estado_vidrios",
                "estado_herrajes",
                "estado_pago",
            ]
            columnas_encontradas = []

            for col in columnas_integracion:
                if col in headers:
                    columnas_encontradas.append(col)
                    print(f"   [CHECK] Columna '{col}' presente")
                else:
                    print(f"   [ERROR] Columna '{col}' faltante")

            if len(columnas_encontradas) == len(columnas_integracion):
                resultados["visual"] = True
                resultados["integracion"] = len(columnas_encontradas)
            else:
                resultados["integracion"] = len(columnas_encontradas)

        except Exception as e:
            resultados["errores"].append(f"Headers: {e}")
            print(f"   [ERROR] Error verificando headers: {e}")

        # 4. Verificar datos de ejemplo
        print("\n4Ô∏è‚É£  Verificando datos de ejemplo...")

        try:
            obras = obras_model.obtener_datos_obras()
            if obras and len(obras) > 0:
                print(f"   [CHECK] {len(obras)} obras en sistema")

                # Probar con una obra real
                id_obra = obras[0][0]
                nombre_obra = obras[0][1] if len(obras[0]) > 1 else "Sin nombre"
                print(
                    f"   üîç Probando integraci√≥n con obra: {nombre_obra} (ID: {id_obra})"
                )

                # Test r√°pido de estados
                estados_probados = 0

                if "InventarioModel" in modelos_verificados:
                    try:
                        estado = inv_model.obtener_estado_pedido_por_obra(id_obra)
                        print(f"     üì¶ Inventario: {estado}")
                        estados_probados += 1
                    except:
                        print(f"     üì¶ Inventario: tabla no existe (normal)")

                if "VidriosModel" in modelos_verificados:
                    try:
                        estado = vid_model.obtener_estado_pedido_por_obra(id_obra)
                        print(f"     ü™ü Vidrios: {estado}")
                        estados_probados += 1
                    except:
                        print(f"     ü™ü Vidrios: tabla no existe (normal)")

                if "HerrajesModel" in modelos_verificados:
                    try:
                        estado = her_model.obtener_estado_pedido_por_obra(id_obra)
                        print(f"     üîß Herrajes: {estado}")
                        estados_probados += 1
                    except:
                        print(f"     üîß Herrajes: tabla no existe (normal)")

                if "ContabilidadModel" in modelos_verificados:
                    try:
                        estado = cont_model.obtener_estado_pago_pedido_por_obra(
                            id_obra, "inventario"
                        )
                        print(f"     üí∞ Pagos: {estado}")
                        estados_probados += 1
                    except:
                        print(f"     üí∞ Pagos: tabla no existe (normal)")

                print(f"   [CHECK] {estados_probados} estados verificados")

            else:
                print("   [WARN]  No hay obras en el sistema")

        except Exception as e:
            resultados["errores"].append(f"Datos: {e}")
            print(f"   [ERROR] Error verificando datos: {e}")

        # Cerrar conexi√≥n
        if db.connection:
            db.connection.close()

        # 5. Reporte final
        print("\n" + "=" * 55)
        print("[CHART] REPORTE FINAL")
        print("=" * 55)

        print(f"üîå Conexi√≥n BD: {'[CHECK] OK' if resultados['conexion'] else '[ERROR] FALLO'}")
        print(f"üèóÔ∏è  Modelos: {resultados['modelos']}/5 funcionando")
        print(f"üé® Integraci√≥n visual: {resultados['integracion']}/4 columnas")
        print(f"[ERROR] Errores: {len(resultados['errores'])}")

        if resultados["errores"]:
            print("\nüö® ERRORES DETECTADOS:")
            for error in resultados["errores"]:
                print(f"   ‚Ä¢ {error}")

        # Evaluaci√≥n final
        score = 0
        if resultados["conexion"]:
            score += 3
        score += resultados["modelos"]
        score += resultados["integracion"]
        if resultados["visual"]:
            score += 2

        max_score = 14  # 3 + 5 + 4 + 2
        percentage = (score / max_score) * 100

        print(f"\nüéØ PUNTUACI√ìN: {score}/{max_score} ({percentage:.1f}%)")

        if percentage >= 90:
            print("üéâ ESTADO: [CHECK] EXCELENTE - Sistema completamente funcional")
            print("üëç Todas las funcionalidades de integraci√≥n est√°n operativas")
        elif percentage >= 70:
            print("üîß ESTADO: [WARN]  BUENO - Sistema mayormente funcional")
            print("üí° Algunas mejoras menores recomendadas")
        elif percentage >= 50:
            print("üöß ESTADO: [WARN]  PARCIAL - Sistema parcialmente funcional")
            print("üî® Se requieren algunas correcciones")
        else:
            print("üö® ESTADO: [ERROR] REQUIERE ATENCI√ìN - Sistema necesita revisi√≥n")
            print("üõ†Ô∏è  Se requiere investigaci√≥n y correcciones")

        print(f"\nüìã PR√ìXIMOS PASOS:")
        if percentage >= 90:
            print("   ‚Ä¢ Sistema listo para producci√≥n")
            print("   ‚Ä¢ Ejecutar: python main.py para usar la aplicaci√≥n")
            print("   ‚Ä¢ Opcional: Crear tablas de pedidos para datos hist√≥ricos")
        else:
            print("   ‚Ä¢ Revisar errores mostrados arriba")
            print("   ‚Ä¢ Verificar configuraci√≥n de base de datos")
            print("   ‚Ä¢ Ejecutar: python test_simple.py para m√°s detalles")

        return percentage >= 70

    except Exception as e:
        print(f"\nüö® ERROR CR√çTICO: {e}")
        traceback.print_exc()
        return False


if __name__ == "__main__":
    print("[ROCKET] Iniciando verificaci√≥n del sistema...")
    exito = verificar_sistema()
    print(f"\n{'[CHECK] VERIFICACI√ìN COMPLETADA' if exito else '[ERROR] VERIFICACI√ìN FALL√ì'}")
    sys.exit(0 if exito else 1)

import os
import sys
import traceback

from PyQt6.QtWidgets import QApplication

from core.database import ObrasDatabaseConnection
from modules.contabilidad.model import ContabilidadModel
from modules.herrajes.model import HerrajesModel
from modules.inventario.model import InventarioModel
from modules.obras.model import ObrasModel
from modules.vidrios.model import VidriosModel
