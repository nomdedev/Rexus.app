#!/usr/bin/env python3
"""
Script de testing funcional para detectar errores durante el uso real.
Simula interacciones t√≠picas del usuario para encontrar problemas ocultos.
"""

# A√±adir el directorio del proyecto al path
sys.path.insert(0, str(Path(__file__).parent.parent))

def test_modulo_import(modulo_name):
    """Prueba la importaci√≥n de un m√≥dulo espec√≠fico."""
    try:
        if modulo_name == "inventario":
            print(f"‚úÖ {modulo_name}: Importaciones exitosas")

        elif modulo_name == "obras":
            print(f"‚úÖ {modulo_name}: Importaciones exitosas")

        elif modulo_name == "herrajes":
            print(f"‚úÖ {modulo_name}: Importaciones exitosas")

        elif modulo_name == "vidrios":
            print(f"‚úÖ {modulo_name}: Importaciones exitosas")

        elif modulo_name == "usuarios":
            print(f"‚úÖ {modulo_name}: Importaciones exitosas")

        elif modulo_name == "auditoria":
            print(f"‚úÖ {modulo_name}: Importaciones exitosas")

        return True

    except ImportError as e:
        print(f"‚ùå {modulo_name}: Error de importaci√≥n - {e}")
        return False
    except Exception as e:
        print(f"‚ùå {modulo_name}: Error inesperado - {e}")
        return False

def test_database_connection():
    """Prueba la conexi√≥n a la base de datos."""
    try:
        db = DatabaseConnection()
        connection = db.get_connection()
        if connection:
            print("‚úÖ Base de datos: Conexi√≥n exitosa")
            connection.close()
            return True
        else:
            print("‚ùå Base de datos: No se pudo establecer conexi√≥n")
            return False
    except Exception as e:
        print(f"‚ùå Base de datos: Error - {e}")
        return False

def test_core_components():
    """Prueba los componentes core."""
    try:
        print("‚úÖ Core: Componentes importados correctamente")
        return True
    except Exception as e:
        print(f"‚ùå Core: Error - {e}")
        return False

def test_model_instantiation():
    """Prueba la instanciaci√≥n de modelos con usuario invitado."""
    try:
        db = DatabaseConnection()

        # Probar modelo de inventario
        inventario_model = InventarioModel(db)
        print("‚úÖ Inventario Model: Instanciado correctamente")

        # Probar modelo de usuarios
        usuarios_model = UsuariosModel(db)
        print("‚úÖ Usuarios Model: Instanciado correctamente")

        # Probar modelo de auditor√≠a
        auditoria_model = AuditoriaModel(db)
        print("‚úÖ Auditor√≠a Model: Instanciado correctamente")

        return True
    except Exception as e:
        print(f"‚ùå Models: Error de instanciaci√≥n - {e}")
        return False

def test_sql_queries():
    """Prueba consultas SQL b√°sicas para detectar errores de sintaxis."""
    try:
        db = DatabaseConnection()
        inventario_model = InventarioModel(db)

        # Probar consulta b√°sica
        items = inventario_model.obtener_todos()
        print(f"‚úÖ SQL Query: Inventario retorn√≥ {len(items) if items else 0} items")

        # Probar consulta con filtros
        items_filtrados = inventario_model.buscar_por_codigo("TEST")
        print(f"‚úÖ SQL Query: B√∫squeda por c√≥digo completada")

        return True
    except Exception as e:
        print(f"‚ùå SQL Queries: Error - {e}")
        return False

def test_audit_functionality():
    """Prueba la funcionalidad de auditor√≠a con usuario invitado."""
    try:
        db = DatabaseConnection()
        auditoria_model = AuditoriaModel(db)

        # Probar registro de evento con usuario invitado
        resultado = auditoria_model.registrar_evento(
            usuario_id=0,  # Usuario invitado
            modulo="testing",
            tipo_evento="test",
            descripcion="Test de auditor√≠a autom√°tico"
        )

        if resultado:
            print("‚úÖ Auditor√≠a: Registro de evento exitoso con usuario invitado")
        else:
            print("‚ö†Ô∏è Auditor√≠a: Registro retorn√≥ False (puede ser normal)")
import sys
from pathlib import Path

from core.database import DatabaseConnection
from modules.auditoria.model import AuditoriaModel
from modules.inventario.model import InventarioModel
from modules.usuarios.model import UsuariosModel

        return True
    except Exception as e:
        print(f"‚ùå Auditor√≠a: Error - {e}")
        return False

def run_all_tests():
    """Ejecuta todos los tests funcionales."""
    print("=== TESTING FUNCIONAL DE M√ìDULOS ===")
    print()

    resultados = []

    # Test de componentes core
    print("1. Testing componentes core...")
    resultados.append(test_core_components())

    # Test de conexi√≥n a BD
    print("\n2. Testing conexi√≥n a base de datos...")
    resultados.append(test_database_connection())

    # Test de importaci√≥n de m√≥dulos
    print("\n3. Testing importaci√≥n de m√≥dulos...")
    modulos = ["inventario", "obras", "herrajes", "vidrios", "usuarios", "auditoria"]
    for modulo in modulos:
        resultados.append(test_modulo_import(modulo))

    # Test de instanciaci√≥n de modelos
    print("\n4. Testing instanciaci√≥n de modelos...")
    resultados.append(test_model_instantiation())

    # Test de consultas SQL
    print("\n5. Testing consultas SQL...")
    resultados.append(test_sql_queries())

    # Test de auditor√≠a
    print("\n6. Testing funcionalidad de auditor√≠a...")
    resultados.append(test_audit_functionality())

    # Resumen
    exitosos = sum(resultados)
    total = len(resultados)

    print(f"\n=== RESUMEN ===")
    print(f"Tests exitosos: {exitosos}/{total}")
    print(f"Porcentaje de √©xito: {(exitosos/total)*100:.1f}%")

    if exitosos == total:
        print("üéâ TODOS LOS TESTS PASARON - La aplicaci√≥n est√° funcionando correctamente")
        return 0
    else:
        print(f"‚ö†Ô∏è {total-exitosos} TESTS FALLARON - Revisar errores reportados")
        return 1

if __name__ == "__main__":
    try:
        exit_code = run_all_tests()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è Testing interrumpido por el usuario")
        sys.exit(1)
    except Exception as e:
        print(f"\n‚ùå Error inesperado durante testing: {e}")
        sys.exit(1)
