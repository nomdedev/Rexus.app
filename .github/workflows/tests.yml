name: üß™ Tests

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'pytest.ini'
  pull_request:
    branches: [ main, develop ]
    paths:
      - 'src/**'
      - 'tests/**'
      - 'requirements.txt'
      - 'pytest.ini'

jobs:
  test:
    name: üß™ Run Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        include:
          - os: ubuntu-latest
            python-version: '3.11'
            coverage: true

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: üñ•Ô∏è Setup virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0 libfontconfig1-dev libfreetype6-dev libx11-dev libx11-xcb-dev libxext-dev libxfixes-dev libxi-dev libxrender-dev libxcb1-dev libxcb-glx0-dev libxcb-keysyms1-dev libxcb-image0-dev libxcb-shm0-dev libxcb-icccm4-dev libxcb-sync-dev libxcb-xfixes0-dev libxcb-shape0-dev libxcb-randr0-dev libxcb-render-util0-dev libxcb-util-dev libxcb-xinerama0-dev libxcb-xkb-dev libxkbcommon-dev libxkbcommon-x11-dev

    - name: üì¶ Cache pip packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ${{ runner.os == 'Windows' && '~\AppData\Local\pip\Cache' || '~/.cache/pip' }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.python-version }}-pip-

    - name: ‚¨ÜÔ∏è Upgrade pip
      run: python -m pip install --upgrade pip

    - name: üì• Install dependencies
      run: |
        pip install pytest pytest-cov pytest-mock pytest-qt pytest-xvfb pytest-timeout
        pip install -r requirements.txt

    - name: üß™ Run unit tests
      env:
        DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || '' }}
        PYTHONPATH: ${{ github.workspace }}
        # Variables de entorno para testing
        DB_PASSWORD: test_password
        SECRET_KEY: test_secret_key_for_ci_cd_only
        JWT_SECRET_KEY: test_jwt_secret_for_ci_cd_only
        ENCRYPTION_KEY: test_encryption_key_32_chars__
      run: |
        ${{ runner.os == 'Linux' && 'xvfb-run -a' || '' }} pytest tests/ \
          --maxfail=10 \
          --disable-warnings \
          --timeout=300 \
          ${{ matrix.coverage && '--cov=src --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=70' || '' }} \
          --junitxml=junit.xml \
          -v

    - name: üìä Upload coverage reports
      if: matrix.coverage
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: üì§ Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-py${{ matrix.python-version }}
        path: |
          junit.xml
          ${{ matrix.coverage && 'htmlcov/' || '' }}
          ${{ matrix.coverage && 'coverage.xml' || '' }}

  integration-tests:
    name: üîó Integration Tests
    runs-on: ubuntu-latest
    needs: test
    
    services:
      sqlserver:
        image: mcr.microsoft.com/mssql/server:2022-latest
        env:
          SA_PASSWORD: Test123!@#
          ACCEPT_EULA: Y
        ports:
          - 1433:1433
        options: >-
          --health-cmd "/opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P Test123!@# -Q 'SELECT 1'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üñ•Ô∏è Setup virtual display
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0

    - name: üì• Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-mock pytest-qt pytest-xvfb
        pip install -r requirements.txt

    - name: üóÉÔ∏è Setup test database
      run: |
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "Test123!@#" -Q "CREATE DATABASE test_inventario"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "Test123!@#" -Q "CREATE DATABASE test_users"
        /opt/mssql-tools/bin/sqlcmd -S localhost -U sa -P "Test123!@#" -Q "CREATE DATABASE test_auditoria"

    - name: üîó Run integration tests
      env:
        DISPLAY: :99
        QT_QPA_PLATFORM: offscreen
        PYTHONPATH: ${{ github.workspace }}
        # Variables de entorno para testing con BD
        DB_SERVER: localhost
        DB_USERNAME: sa
        DB_PASSWORD: Test123!@#
        DB_INVENTARIO: test_inventario
        DB_USERS: test_users
        DB_AUDITORIA: test_auditoria
        SECRET_KEY: integration_test_secret_key_for_ci_cd
        JWT_SECRET_KEY: integration_test_jwt_secret_for_ci_cd
        ENCRYPTION_KEY: integration_test_encrypt_32char_
      run: |
        xvfb-run -a pytest tests/integracion/ \
          --maxfail=5 \
          --disable-warnings \
          --timeout=600 \
          -v

  performance-tests:
    name: ‚ö° Performance Tests
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: üì• Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-benchmark memory_profiler
        pip install -r requirements.txt

    - name: ‚ö° Run performance tests
      env:
        PYTHONPATH: ${{ github.workspace }}
        DB_PASSWORD: performance_test_password
        SECRET_KEY: performance_test_secret_key_for_ci_cd
        JWT_SECRET_KEY: performance_test_jwt_secret_for_ci_cd
        ENCRYPTION_KEY: performance_test_encrypt_32char
      run: |
        pytest tests/ -k "performance" \
          --benchmark-json=benchmark.json \
          --benchmark-min-rounds=5 \
          -v

    - name: üìä Upload performance results
      uses: actions/upload-artifact@v3
      with:
        name: performance-results
        path: benchmark.json