# -*- coding: utf-8 -*-
"""
Breadcrumb Widget - Navegaci√≥n por migas de pan
Proporciona navegaci√≥n contextual en todos los m√≥dulos
"""

from PyQt6.QtCore import Qt, pyqtSignal
from PyQt6.QtWidgets import QWidget, QHBoxLayout, QLabel, QPushButton
from PyQt6.QtGui import QFont


class BreadcrumbWidget(QWidget):
    """Widget de navegaci√≥n por migas de pan."""
    
    # Se√±ales
    breadcrumb_clicked = pyqtSignal(str)  # Emite el nombre del breadcrumb clickeado
    
    def __init__(self, parent=None):
        super().__init__(parent)
        
        self.breadcrumbs = []
        self.setup_ui()
        self.apply_styles()
    
    def setup_ui(self):
        """Configura la interfaz del widget."""
        self.layout = QHBoxLayout(self)
        self.layout.setContentsMargins(0, 0, 0, 0)
        self.layout.setSpacing(5)
        
        # Icono de inicio
        self.home_btn = QPushButton("üè†")
        self.home_btn.setToolTip("Ir al Dashboard")
        self.home_btn.clicked.connect(lambda: self.breadcrumb_clicked.emit("Dashboard"))
        self.layout.addWidget(self.home_btn)
    
    def apply_styles(self):
        """Aplica estilos al widget."""
        self.setStyleSheet("""
            BreadcrumbWidget {
                background: transparent;
                padding: 5px 0px;
            }
            QPushButton {
                background: transparent;
                border: none;
                color: #667eea;
                font-weight: 500;
                padding: 4px 8px;
                border-radius: 4px;
                font-size: 13px;
            }
            QPushButton:hover {
                background: #f0f0f0;
                color: #4c51bf;
            }
            QLabel {
                color: #999;
                font-size: 13px;
                padding: 4px 2px;
            }
        """)
    
    def set_breadcrumbs(self, breadcrumbs_list):
        """
        Establece la lista de breadcrumbs.
        
        Args:
            breadcrumbs_list: Lista de strings con los nombres de las migas
        """
        # Limpiar breadcrumbs existentes (excepto el bot√≥n home)
        self.clear_breadcrumbs()
        
        self.breadcrumbs = breadcrumbs_list
        
        for i, breadcrumb in enumerate(breadcrumbs_list):
            # Agregar separador antes del breadcrumb (excepto el primero)
            if i > 0 or len(breadcrumbs_list) > 0:
                separator = QLabel("‚Ä∫")
                separator.setAlignment(Qt.AlignmentFlag.AlignCenter)
                self.layout.addWidget(separator)
            
            # Crear bot√≥n o label seg√∫n si es el √∫ltimo elemento
            if i == len(breadcrumbs_list) - 1:
                # √öltimo elemento - mostrar como label (no clickeable)
                label = QLabel(breadcrumb)
                label.setStyleSheet("""
                    QLabel {
                        color: #333;
                        font-weight: bold;
                        font-size: 13px;
                        padding: 4px 8px;
                    }
                """)
                self.layout.addWidget(label)
            else:
                # Elementos anteriores - mostrar como botones clickeables
                btn = QPushButton(breadcrumb)
                btn.clicked.connect(lambda checked, name=breadcrumb: self.breadcrumb_clicked.emit(name))
                self.layout.addWidget(btn)
        
        # Agregar stretch al final
        self.layout.addStretch()
    
    def clear_breadcrumbs(self):
        """Limpia todos los breadcrumbs excepto el bot√≥n home."""
        while self.layout.count() > 1:
            child = self.layout.takeAt(1)
            if child.widget():
                child.widget().deleteLater()
    
    def add_breadcrumb(self, name):
        """Agrega un breadcrumb al final de la lista."""
        current_breadcrumbs = self.breadcrumbs.copy()
        current_breadcrumbs.append(name)
        self.set_breadcrumbs(current_breadcrumbs)
    
    def navigate_to(self, target_breadcrumb):
        """
        Navega a un breadcrumb espec√≠fico, eliminando los que est√°n despu√©s.
        
        Args:
            target_breadcrumb: Nombre del breadcrumb objetivo
        """
        try:
            index = self.breadcrumbs.index(target_breadcrumb)
            new_breadcrumbs = self.breadcrumbs[:index + 1]
            self.set_breadcrumbs(new_breadcrumbs)
        except ValueError:
            # El breadcrumb no existe en la lista actual
            pass


class ModuleBreadcrumb(BreadcrumbWidget):
    """Breadcrumb especializado para m√≥dulos con patrones comunes."""
    
    def __init__(self, module_name, parent=None):
        super().__init__(parent)
        self.module_name = module_name
        self.set_module_context(module_name)
    
    def set_module_context(self, module_name):
        """Establece el contexto del m√≥dulo."""
        self.set_breadcrumbs([module_name])
    
    def set_sub_context(self, sub_context):
        """Establece un sub-contexto dentro del m√≥dulo."""
        self.set_breadcrumbs([self.module_name, sub_context])
    
    def set_item_context(self, sub_context, item_name):
        """Establece contexto para un √≠tem espec√≠fico."""
        self.set_breadcrumbs([self.module_name, sub_context, item_name])


class SmartBreadcrumb(BreadcrumbWidget):
    """Breadcrumb inteligente que detecta autom√°ticamente el contexto."""
    
    def __init__(self, parent=None):
        super().__init__(parent)
        self.context_history = []
    
    def auto_detect_context(self, current_view, current_action=None, current_item=None):
        """
        Detecta autom√°ticamente el contexto basado en la vista actual.
        
        Args:
            current_view: Nombre de la vista actual
            current_action: Acci√≥n actual (crear, editar, ver, etc.)
            current_item: Item espec√≠fico si aplica
        """
        breadcrumbs = []
        
        # Mapeo de vistas a breadcrumbs
        view_mapping = {
            'InventarioView': 'Inventario',
            'ObrasView': 'Obras', 
            'PedidosView': 'Pedidos',
            'ComprasView': 'Compras',
            'UsuariosView': 'Usuarios',
            'ConfiguracionView': 'Configuraci√≥n',
            'VidriosView': 'Vidrios',
            'NotificacionesView': 'Notificaciones'
        }
        
        # Agregar m√≥dulo base
        if current_view in view_mapping:
            breadcrumbs.append(view_mapping[current_view])
        
        # Agregar acci√≥n si existe
        if current_action:
            action_names = {
                'create': 'Crear Nuevo',
                'edit': 'Editar',
                'view': 'Ver Detalles',
                'list': 'Lista',
                'reports': 'Reportes',
                'settings': 'Configuraci√≥n'
            }
            if current_action in action_names:
                breadcrumbs.append(action_names[current_action])
        
        # Agregar item espec√≠fico si existe
        if current_item:
            breadcrumbs.append(str(current_item))
        
        self.set_breadcrumbs(breadcrumbs)
        
        # Guardar en historial para navegaci√≥n
        self.context_history.append({
            'view': current_view,
            'action': current_action, 
            'item': current_item,
            'breadcrumbs': breadcrumbs.copy()
        })
    
    def get_navigation_history(self):
        """Retorna el historial de navegaci√≥n."""
        return self.context_history
    
    def clear_history(self):
        """Limpia el historial de navegaci√≥n."""
        self.context_history.clear()