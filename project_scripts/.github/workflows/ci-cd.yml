name: 🚀 Rexus CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  PYTHON_VERSION: '3.11'
  NODE_VERSION: '18'

jobs:
  # ===== ANÁLISIS DE CÓDIGO =====
  code-quality:
    name: 📝 Code Quality & Security
    runs-on: ubuntu-latest
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy bandit pytest pytest-cov
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: 🎨 Code formatting (Black)
      run: black --check --diff src/ tests/

    - name: 📋 Import sorting (isort)
      run: isort --check-only --diff src/ tests/

    - name: 🔍 Linting (Flake8)
      run: flake8 src/ tests/ --max-line-length=88 --extend-ignore=E203,W503

    - name: 🔒 Security scan (Bandit)
      run: bandit -r src/ -f json -o bandit-report.json
      continue-on-error: true

    - name: 📤 Upload security report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: security-report
        path: bandit-report.json

  # ===== TESTS =====
  test:
    name: 🧪 Tests
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11']
        exclude:
          - os: windows-latest
            python-version: '3.9'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: 🖥️ Setup virtual display (Linux)
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install -y xvfb libxkbcommon-x11-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-xinerama0 libxcb-xfixes0
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &

    - name: 📦 Cache dependencies
      uses: actions/cache@v3
      with:
        path: |
          ~/.cache/pip
          ${{ runner.os == 'Windows' && '~\AppData\Local\pip\Cache' || '~/.cache/pip' }}
        key: ${{ runner.os }}-${{ matrix.python-version }}-pip-${{ hashFiles('**/requirements.txt') }}

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pytest pytest-cov pytest-mock pytest-qt pytest-xvfb
        pip install -r requirements.txt

    - name: 🧪 Run tests
      env:
        DISPLAY: ${{ runner.os == 'Linux' && ':99' || '' }}
        QT_QPA_PLATFORM: ${{ runner.os == 'Linux' && 'offscreen' || '' }}
        PYTHONPATH: ${{ github.workspace }}
      run: |
        pytest tests/ \
          --cov=src \
          --cov-report=xml \
          --cov-report=html \
          --cov-report=term \
          --junitxml=junit.xml \
          -v

    - name: 📊 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      if: matrix.os == 'ubuntu-latest' && matrix.python-version == '3.11'
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

    - name: 📤 Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.python-version }}
        path: |
          junit.xml
          htmlcov/
          coverage.xml

  # ===== BUILD =====
  build:
    name: 🏗️ Build Application
    runs-on: ${{ matrix.os }}
    needs: [code-quality, test]
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🐍 Setup Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: 📥 Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r requirements.txt

    - name: 🏗️ Build executable
      run: |
        pyinstaller --name="Rexus" \
          --onefile \
          --windowed \
          --icon=resources/icons/icono-app-mps.jpg \
          --add-data "resources;resources" \
          --add-data "config;config" \
          src/main/app.py

    - name: 📤 Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: rexus-${{ matrix.os }}
        path: dist/

  # ===== DOCKER BUILD =====
  docker:
    name: 🐳 Docker Build & Push
    runs-on: ubuntu-latest
    needs: [code-quality, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔧 Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: 🔑 Login to DockerHub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: 🏷️ Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ secrets.DOCKERHUB_USERNAME }}/rexus
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=sha

    - name: 🏗️ Build and push
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # ===== SECURITY SCAN =====
  security:
    name: 🔒 Security Scanning
    runs-on: ubuntu-latest
    needs: [docker]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🔍 Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ secrets.DOCKERHUB_USERNAME }}/rexus:main'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: 📤 Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v3
      with:
        sarif_file: 'trivy-results.sarif'

  # ===== DEPLOY TO STAGING =====
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build, docker]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🚀 Deploy to staging
      run: |
        echo "🚀 Deploying to staging environment..."
        # Aquí irían los comandos específicos de deploy
        # Por ejemplo: kubectl, docker-compose, etc.

  # ===== DEPLOY TO PRODUCTION =====
  deploy-production:
    name: 🌟 Deploy to Production
    runs-on: ubuntu-latest
    needs: [build, docker, security]
    if: github.event_name == 'release'
    environment: production
    
    steps:
    - name: 📥 Checkout
      uses: actions/checkout@v4

    - name: 🌟 Deploy to production
      run: |
        echo "🌟 Deploying to production environment..."
        # Aquí irían los comandos específicos de deploy de producción

  # ===== NOTIFY =====
  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: always()
    
    steps:
    - name: 📢 Notify success
      if: ${{ needs.deploy-production.result == 'success' }}
      run: |
        echo "✅ Deployment successful!"
        # Aquí se pueden agregar notificaciones a Slack, Discord, etc.

    - name: 📢 Notify failure
      if: ${{ needs.deploy-production.result == 'failure' }}
      run: |
        echo "❌ Deployment failed!"
        # Aquí se pueden agregar notificaciones de error